#!/bin/sh


log() {
    [ "$2" ] || return
    name=$1
    # shellcheck disable=2046,2086
    {
        set -f
        set +f -- $2
        info=$*
    }

    printf '[%sC' "${ascii_width--1}"
    printf '[3%s;1m%s[m' "${PF_COL1-4}" "$name"
    printf '%s' "$PF_SEP"
    printf '[%sD[%sC' "${#name}" "${PF_ALIGN-$info_length}"
    printf '[3%sm%s[m\n' "${PF_COL2-7}" "$info"
    : $((info_height+=1))
}

get_title() {
    user=${USER:-$(whoami)}
    # shellcheck disable=SC2039
    hostname=${HOSTNAME:-${hostname:-$(hostname)}}

    log "[3${PF_COL3:-1}m${user}${c7}@[3${PF_COL3:-1}m${hostname}" " " >&6
}

get_os() {
    [ "$distro" ] && {
        log os "$distro" >&6
        return
    }

    case $os in
        Linux*)
            if command -v lsb_release; then
                distro=$(lsb_release -sd)
                distro=${distro##\"}
                distro=${distro%%\"}

            else
                # shellcheck source=/dev/null
                . /etc/os-release && distro=$PRETTY_NAME
            fi

            command -v crux        && distro=$(crux)
            command -v guix        && distro='Guix System'

            [ "${kernel%%*-Microsoft}" ] ||
                distro="$distro on Windows 10"
        ;;

        Darwin*)
            while IFS='<>' read -r _ _ line _; do
                case $line in
                    # Match 'ProductVersion' and read the next line
                    # directly as it contains the key's value.
                    ProductVersion)
                        IFS='<>' read -r _ _ mac_version _
                        break
                    ;;
                esac
            done < /System/Library/CoreServices/SystemVersion.plist

            case $mac_version in
                10.4*)  distro='Mac OS X Tiger' ;;
                10.5*)  distro='Mac OS X Leopard' ;;
                10.6*)  distro='Mac OS X Snow Leopard' ;;
                10.7*)  distro='Mac OS X Lion' ;;
                10.8*)  distro='OS X Mountain Lion' ;;
                10.9*)  distro='OS X Mavericks' ;;
                10.10*) distro='OS X Yosemite' ;;
                10.11*) distro='OS X El Capitan' ;;
                10.12*) distro='macOS Sierra' ;;
                10.13*) distro='macOS High Sierra' ;;
                10.14*) distro='macOS Mojave' ;;
                10.15*) distro='macOS Catalina' ;;
                *)      distro='macOS' ;;
            esac

            distro="$distro $mac_version"
        ;;

        Haiku)
            distro="Haiku $(uname -v)"
        ;;

        *)
            distro="$os $kernel"
        ;;
    esac
}

get_kernel() {
    case $os in
        *BSD*|Haiku) ;;

        *)
            log kernel "$kernel" >&6
        ;;
   esac
}

get_shell() {
    log shell "${SHELL##*/}" >&6
}

get_host() {
    case $os in
        Linux*)
            read -r name    < /sys/devices/virtual/dmi/id/product_name
            read -r version < /sys/devices/virtual/dmi/id/product_version
            read -r model   < /sys/firmware/devicetree/base/model

            host="$name $version $model"
        ;;

        Darwin*|FreeBSD*)
            host=$(sysctl -n hw.model)
        ;;

        NetBSD*)
            host=$(sysctl -n machdep.dmi.system-vendor \
                             machdep.dmi.system-product)
        ;;

        *BSD*)
            host=$(sysctl -n hw.vendor hw.product)
        ;;
    esac

    # shellcheck disable=2046,2086
    {
        set -f
        set +f -- $host
        host=
    }

    for word; do
        case $word in
            To      | [Bb]e      | [Ff]illed | by     | O.E.M.  | OEM  |\
            Not     | Applicable | Specified | System | Product | Name |\
            Version | Undefined  | Default   | string | INVALID | ï¿½    )
                continue
            ;;
        esac

        host="$host$word "
    done

    log host "${host:-$arch}" >&6
}

get_uptime() {
    case $os in
        Linux*)
            IFS=. read -r s _ < /proc/uptime
        ;;

        Darwin*|*BSD*)
            s=$(sysctl -n kern.boottime)

            s=${s#*=}
            s=${s%,*}

            s=$(($(date +%s) - s))
        ;;

        Haiku)
            s=$(($(system_time) / 1000000))
        ;;
    esac

    d=$((s / 60 / 60 / 24))
    h=$((s / 60 / 60 % 24))
    m=$((s / 60 % 60))

    [ "$d" = 0 ] || uptime="${uptime}${d}d "
    [ "$h" = 0 ] || uptime="${uptime}${h}h "
    [ "$m" = 0 ] || uptime="${uptime}${m}m "

    log uptime "${uptime:-0m}" >&6
}

get_pkgs() {
    has() { command -v "$1" >/dev/null; }

    # shellcheck disable=2006
    packages=`
        case $os in
            Linux*)
                has kiss       && kiss l
                has bonsai     && bonsai list
                has pacman-key && pacman -Qq
                has dpkg       && dpkg-query -f '.\n' -W
                has rpm        && rpm -qa
                has xbps-query && xbps-query -l
                has apk        && apk info
                
                has brew       && printf '%s\n' "$(brew --cellar)/"*
                has emerge     && printf '%s\n' /var/db/pkg/*/*/
                has pkgtool    && printf '%s\n' /var/log/packages/*
                
                has guix       && {
                    guix package -p /run/current-system/profile -I
                    guix package -I
                }
                has nix-store  && {
                    nix-store -q --requisites /run/current-system/sw
                    nix-store -q --requisites ~.nix-profile
                }
            ;;
            Darwin*)
                has pkgin      && pkgin list
                has port       && port installed
                has brew       && printf '%s\n' /usr/local/Cellar/*
            ;;
            FreeBSD*)
                pkg info
            ;;
            OpenBSD*)
                printf '%s\n' /var/db/pkg/*/
            ;;
            NetBSD*)
                pkg_info
            ;;
            Haiku)
                printf '%s\n' /boot/system/package-links/*
            ;;
        esac | wc -l
    `

    log pkgs "${packages:-?}" >&6
}

get_memory() {
    case $os in
        Linux*)
            while IFS=:k read -r key val _; do
                case $key in
                    MemTotal)
                        mem_used=$((mem_used + val))
                        mem_full=$val
                    ;;

                    Shmem)
                        mem_used=$((mem_used + val))
                    ;;

                    MemFree|Buffers|Cached|SReclaimable)
                        mem_used=$((mem_used - val))
                    ;;
                esac
            done < /proc/meminfo

            mem_used=$((mem_used / 1024))
            mem_full=$((mem_full / 1024))
        ;;

        Darwin*)
            mem_full=$(($(sysctl -n hw.memsize) / 1024 / 1024))

            while IFS=:. read -r key val; do
                case $key in
                    *wired*|*active*|*occupied*)
                        mem_used=$((mem_used + ${val:-0}))
                    ;;
                esac

            done <<-EOF
                $(vm_stat)
			EOF

            mem_used=$((mem_used * 4 / 1024))
        ;;

        OpenBSD*)
            mem_full=$(($(sysctl -n hw.physmem) / 1024 / 1024))
            while read -r _ _ line _; do
                mem_used=${line%%M}

            done <<-EOF
                $(vmstat)
			EOF
        ;;

        FreeBSD*)
            mem_full=$(($(sysctl -n hw.physmem) / 1024 / 1024))
            # shellcheck disable=2046
            {
                set -f
                set +f -- $(sysctl -n hw.pagesize \
                                      vm.stats.vm.v_inactive_count \
                                      vm.stats.vm.v_free_count \
                                      vm.stats.vm.v_cache_count)
            }

            # $1: hw.pagesize
            # $2: vm.stats.vm.v_inactive_count
            # $3: vm.stats.vm.v_free_count
            # $4: vm.stats.vm.v_cache_count
            mem_used=$((($2 + $3 + $4) * $1 / 1024 / 1024))
        ;;

        NetBSD*)
            mem_full=$(($(sysctl -n hw.physmem64) / 1024 / 1024))
            while IFS=:k read -r key val _; do
                case $key in
                    MemFree)
                        mem_free=$((val / 1024))
                        break
                    ;;
                esac
            done < /proc/meminfo

            mem_used=$((mem_full - mem_free))
        ;;

        Haiku)
            IFS='( )' read -r _ _ _ _ mem_used _ mem_full <<-EOF
                $(sysinfo -mem)
			EOF

            mem_used=$((mem_used / 1024 / 1024))
            mem_full=$((mem_full / 1024 / 1024))
        ;;
    esac

    log memory "${mem_used:-?}M / ${mem_full:-?}M" >&6
}

get_palette() {
    palette="  [7m$c1  $c2  $c3  $c4  $c5  $c6  $c7  "
    printf '\n[%sC%s[m\n' "${ascii_width-1}" "$palette" >&6
}

get_ascii() {
    read_ascii() {
        while IFS= read -r line; do
            ascii="$ascii$line
"
        done
    }
    case ${1:-${PF_ASCII:-${distro:-$os}}} in
        [Aa]lpine*)
            read_ascii 4 <<-EOF
				${c4}   /\\ /\\
				  /${c7}/ ${c4}\\  \\
				 /${c7}/   ${c4}\\  \\
				/${c7}//    ${c4}\\  \\
				${c7}//      ${c4}\\  \\
				         \\
			EOF
        ;;

        [Aa]rch*)
            read_ascii 4 <<-EOF
				${c6}      /\\
				     /^^\\
				    /\\   \\
				   /${c7}  __  \\
				  /  (  )  \\
				 / __|  |__\\\\
				///        \\\\\\
			EOF
        ;;

        [Aa]rco*)
            read_ascii 4 <<-EOF
				${c4}      /\\
				     /  \\
				    / /\\ \\
				   / /  \\ \\
				  / /    \\ \\
				 / / _____\\ \\
				/_/  \`----.\\_\\
			EOF
        ;;

        [Aa]rtix*)
            read_ascii 6 <<-EOF
				${c4}      /\\
				     /  \\
				    /\`'.,\\
				   /     ',
				  /      ,\`\\
				 /   ,.'\`.  \\
				/.,'\`     \`'.\\
			EOF
        ;;

        [Cc]ent[Oo][Ss]*)
            read_ascii 5 <<-EOF
				${c2} ____${c3}^${c5}____
				${c2} |\\  ${c3}|${c5}  /|
				${c2} | \\ ${c3}|${c5} / |
				${c5}<---- ${c4}---->
				${c4} | / ${c2}|${c3} \\ |
				${c4} |/__${c2}|${c3}__\\|
				${c2}     v
			EOF
        ;;

        [Dd]ebian*)
            read_ascii 1 <<-EOF
				${c1}  _____
				 /  __ \\
				|  /    |
				|  \\___-
				-_
				  --_
			EOF
        ;;

        [Ee]lementary*)
            read_ascii <<-EOF
				${c7}  _______
				 / ____  \\
				/  |  /  /\\
				|__\\ /  / |
				\\   /__/  /
				 \\_______/
			EOF
        ;;

        [Ff]edora*)
            read_ascii 4 <<-EOF
				${c7}      _____
				     /   __)${c4}\\${c7}
				     |  /  ${c4}\\ \\${c7}
				  ${c4}__${c7}_|  |_${c4}_/ /${c7}
				 ${c4}/ ${c7}(_    _)${c4}_/${c7}
				${c4}/ /${c7}  |  |
				${c4}\\ \\${c7}__/  |
				 ${c4}\\${c7}(_____/
			EOF
        ;;

        [Ff]ree[Bb][Ss][Dd]*)
            read_ascii 1 <<-EOF
				${c1} /\\ _____ /\\
				 \\_)     (_/
				 /         \\
				|           |
				|           |
				 \         /
				  --_____--
			EOF
        ;;

        [Gg]entoo*)
            read_ascii 5 <<-EOF
				${c5} _-----_
				(       \\
				\\    0   \\
				${c7} \\        )
				 /      _/
				(     _-
				\\____-
			EOF
        ;;

        [Gg]uix[Ss][Dd]*|guix*)
            read_ascii 3 <<-EOF
				${c3}|.__          __.|
				|__ \\        / __|
				   \\ \\      / /
				    \\ \\    / /
				     \\ \\  / /
				      \\ \\/ /
				       \\__/
			EOF
        ;;

        [Hh]aiku*)
            read_ascii 3 <<-EOF
				${c3}       ,^,
				      /   \\
				*--_ ;     ; _--*
				\\   '"     "'   /
				 '.           .'
				.-'"         "'-.
				 '-.__.   .__.-'
				       |_|
			EOF
        ;;

        [Hh]yperbola*)
            read_ascii <<-EOF
				${c7}    |\`__.\`/
				    \____/
				    .--.
				   /    \\
				  /  ___ \\
				 / .\`   \`.\\
				/.\`      \`.\\
			EOF
        ;;

        [Ll]inux*[Ll]ite*)
            read_ascii 3 <<-EOF
				${c3}   /\\
				  /  \\
				 / ${c7}/ ${c3}/
				> ${c7}/ ${c3}/
				\\ ${c7}\\ ${c3}\\
				 \\_${c7}\\${c3}_\\
				${c7}    \\
			EOF
        ;;

        [Ll]inux*[Mm]int*|[Mm]int)
            read_ascii 2 <<-EOF
				${c2} ___________
				|_          \\
				  | ${c7}| _____ ${c2}|
				  | ${c7}| | | | ${c2}|
				  | ${c7}| | | | ${c2}|
				  | ${c7}\\__${c7}___/ ${c2}|
				  \\_________/
			EOF
        ;;


        [Ll]inux*)
            read_ascii 4 <<-EOF
				${c4}    ___
				   (${c7}.Â· ${c4}|
				   (${c5}<> ${c4}|
				  / ${c7}__  ${c4}\\
				 ( ${c7}/  \\ ${c4}/|
				${c5}_${c4}/\\ ${c7}__)${c4}/${c5}_${c4})
				${c5}\/${c4}-____${c5}\/
			EOF
        ;;

        [Mm]ac[Oo][Ss]*|[Dd]arwin*)
            read_ascii 1 <<-EOF
				${c1}       .:'
				    _ :'_
				${c2} .'\`_\`-'_\`\`.
				:________.-'
				${c3}:_______:
				${c4} :_______\`-;
				${c5}  \`._.-._.'
			EOF
        ;;

        [Mm]ageia*)
            read_ascii 2 <<-EOF
				${c6}   *
				    *
				   **
				${c7} /\\__/\\
				/      \\
				\\      /
				 \\____/
			EOF
        ;;

        [Mm]anjaro*)
            read_ascii 2 <<-EOF
				${c2}||||||||| ||||
				||||||||| ||||
				||||      ||||
				|||| |||| ||||
				|||| |||| ||||
				|||| |||| ||||
				|||| |||| ||||
			EOF
        ;;

        [Mm][Xx]*)
            read_ascii <<-EOF
				${c7}    \\\\  /
				     \\\\/
				      \\\\
				   /\\/ \\\\
				  /  \\  /\\
				 /    \\/  \\
				/__________\\
			EOF
        ;;

        [Nn]et[Bb][Ss][Dd]*)
            read_ascii 3 <<-EOF
				${c7}\\\\${c3}\`-______,----__
				${c7} \\\\        ${c3}__,---\`_
				${c7}  \\\\       ${c3}\`.____
				${c7}   \\\\${c3}-______,----\`-
				${c7}    \\\\
				     \\\\
				      \\\\
			EOF
        ;;

        [Nn]ix[Oo][Ss]*)
            read_ascii 4 <<-EOF
				${c4}  \\\\  \\\\ //
				 ==\\\\__\\\\/ //
				   //   \\\\//
				==//     //==
				 //\\\\___//
				// /\\\\  \\\\==
				  // \\\\  \\\\
			EOF
        ;;

        [Oo]pen[Bb][Ss][Dd]*)
            read_ascii 3 <<-EOF
				${c3}      _____
				    \\-     -/
				 \\_/         \\
				 |        ${c7}O O${c3} |
				 |_  <   )  3 )
				 / \\         /
				    /-_____-\\
			EOF
        ;;

        openSUSE*|open*SUSE*|SUSE*|suse*)
            read_ascii 2 <<-EOF
				${c2}  _______
				__|   __ \\
				     / .\\ \\
				     \\__/ |
				   _______|
				   \\_______
				__________/
			EOF
        ;;

        [Pp]arabola*)
            read_ascii 5 <<-EOF
				${c5}  __ __ __  _
				.\`_//_//_/ / \`.
				          /  .\`
				         / .\`
				        /.\`
				       /\`
			EOF
        ;;

        [Pp]op!_[Oo][Ss]*)
            read_ascii 6 <<-EOF
				${c6}______
				\\   _ \\        __
				 \\ \\ \\ \\      / /
				  \\ \\_\\ \\    / /
				   \\  ___\\  /_/
				    \\ \\    _
				   __\\_\\__(_)_
				  (___________)
			EOF
        ;;

        [Pp]ure[Oo][Ss]*)
            read_ascii <<-EOF
				${c7} _____________
				|  _________  |
				| |         | |
				| |         | |
				| |_________| |
				|_____________|
			EOF
        ;;

        [Ss]lackware*)
            read_ascii 4 <<-EOF
				${c4}   ________
				  /  ______|
				  | |______
				  \\______  \\
				   ______| |
				| |________/
				|____________
			EOF
        ;;

        [Vv]oid*)
            read_ascii 2 <<-EOF
				${c2}    _______
				 _ \\______ -
				| \\  ___  \\ |
				| | /   \ | |
				| | \___/ | |
				| \\______ \\_|
				 -_______\\
			EOF
        ;;

        *)
            [ "$1" ] || {
                get_ascii "$os"
                return
            }

            printf 'error: %s is not currently supported.\n' "$os" >&6
            printf 'error: Open an issue for support to be added.\n' >&6
            exit 1
        ;;
    esac

    while read -r line; do
        : $((ascii_height+=1))
        ascii_width=$((${#line} > ascii_width ? ${#line} : ascii_width))
    done <<-EOF
		$(printf %s "$ascii" | sed 's/\[3.m//g')
	EOF

    : $((ascii_width+=4))

    printf '[?7l[?25l[1m%s[m[%sA' "$ascii" "$ascii_height" >&6
}

main() {
    trap 'printf [?7h[?25h >&6' EXIT
    [ "$1" = -v ] || exec 2>/dev/null
    exec 6>&1 >/dev/null

    # shellcheck disable=2034
    {
        c1='[31m'; c2='[32m'
        c3='[33m'; c4='[34m'
        c5='[35m'; c6='[36m'
        c7='[37m'; c8='[38m'
    }
    read -r os kernel arch <<-EOF
		$(uname -srm)
	EOF

    get_os

    # shellcheck disable=2086
    {
        set -f
        set +f ${PF_INFO-ascii title os host kernel uptime pkgs memory}
        for info; do
            command -v "get_$info" >/dev/null &&
                info_length=$((${#info} > info_length ? ${#info} : info_length))
        done
        : $((info_length+=1))

        for info; do "get_$info"; done
    }

    cursor_pos=$((info_height > ascii_height ? 0 : ascii_height - info_height))
    
    while [ "${i:-0}" -le "$cursor_pos" ]; do
        printf '\n'
        : $((i+=1))
    done >&6
}

main "$@"